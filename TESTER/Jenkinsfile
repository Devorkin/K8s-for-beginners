pipeline {
  agent { label 'server4' }

  environment {
    GIT_REPO = 'https://github.com/Devorkin/K8s-for-begginers.git'
    PROJECT_PATH = './K8s-for-begginers'
  }

  options {
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Git branch to clone')
    string(name: 'TROUBLESHOOT_SLEEP', defaultValue: '', description: 'Optional: sleep duration (e.g., 10m or 1h) for manual troubleshooting')
  }


  stages {
    stage('Preflight Check') {
      steps {
        script {
          def binaries = [
            'git'                 : 'git --version',
            'vagrant'             : 'vagrant --version',
            'VBoxManage'          : 'VBoxManage --version',
          ]

          def rv = false
          binaries.each { key, value ->
            rv = false
            rv = sh(script: "which $key > /dev/null 2>&1", returnStatus: true) == 0
            if (rv) {
              sh "$value"
            } else {
              error "$key is not installed on this server!"
            }
          }
        }
      }
    }

    stage('Vagrant & Virtualbox checks and dependecies') {
      steps {
        sh '''
        set -x
        vboxmanage natnetwork list | grep 192.168.57.0 &> /dev/null
        if [ $? != 0 ]; then
            natnetwork add --netname natnet1 --network "192.168.57.0/24" --enable
        fi
        '''
      }
    }

    stage('Git Clone Project') {
      steps {
        sh "git clone --branch ${params.BRANCH_NAME} $GIT_REPO $PROJECT_PATH --depth 1"
      }
    }

    stage('Install Vagrant plugins') {
      steps {
        script {
          dir(PROJECT_PATH) {
            sh '''
            vagrant plugin install vagrant-hosts
            sed -i 's/File.exists/File.exist/g' /home/yd_sa/.vagrant.d/gems/*/gems/vagrant-vbguest-*/lib/vagrant-vbguest/hosts/virtualbox.rb
            '''
          }
        }
      }
    }

    stage('Check Vagrant project status') {
      steps {
        script {
          dir(PROJECT_PATH) {
            sh 'vagrant status'
          }
        }
      }
    }

    stage('Bring up the Vagrant project') {
      steps {
        script {
          dir(PROJECT_PATH) {
            sh 'vagrant up'
          }
        }
      }
    }

    stage('Confirm Vagrant project') {
      steps {
        script {
          dir(PROJECT_PATH) {
            sh 'vagrant status'
          }
        }
      }
    }

    stage('Troubleshooting Pause') {
      when {
        expression { return params.TROUBLESHOOT_SLEEP?.trim() }
      }
      steps {
        script {
          echo "Manual troubleshooting pause started for ${params.TROUBLESHOOT_SLEEP}"
          sh "sleep ${params.TROUBLESHOOT_SLEEP}"
          echo "Troubleshooting pause ended."
        }
      }
    }
  }

  post {
    always {
      script {
        ansiColor('xterm') {
          dir(PROJECT_PATH) {
            def output = sh(script: 'vagrant destroy --force', returnStdout: true, returnStatus: true)
            if (output != 0) {
              echo "‚ùå Vagrant failed to destroy"
            }
          }
        }
      }
      deleteDir()
    }
    failure {
      echo "Pipeline failed!"
    }
    success {
      echo "Pipeline completed successfully!"
    }
  }
}
